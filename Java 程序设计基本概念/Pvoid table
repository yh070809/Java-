Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.

Note: Print NULL when there are no more names corresponding to an occupation.

Input Format

The OCCUPATIONS table is described as follows:

Occupation will only contain one of the following values: Doctor, Professor, Singer or Actor.

Sample Input

Sample Output

Jenny    Ashley     Meera  Jane
Samantha Christeen  Priya  Julia
NULL     Ketty      NULL   Maria
Explanation

The first column is an alphabetically ordered list of Doctor names. 
The second column is an alphabetically ordered list of Professor names. 
The third column is an alphabetically ordered list of Singer names. 
The fourth column is an alphabetically ordered list of Actor names. 
The empty cell data for columns with less than the maximum number of names per occupation (in this case, the Professor and Actor columns) are filled with NULL values.

DECLARE @Doctor AS Table (id int identity(1, 1), Name varchar(50))
DECLARE @Professor AS Table (id int identity(1, 1), Name varchar(50))
DECLARE @Singer AS Table (id int identity(1, 1), Name varchar(50))
DECLARE @Actor AS Table (id int identity(1, 1), Name varchar(50))

insert into @Doctor(Name) SELECT Name from Occupations WHERE Occupation = 'Doctor' order by Name
insert into @Professor(Name) SELECT Name from Occupations WHERE Occupation = 'Professor' order by Name
insert into @Singer(Name) SELECT Name from Occupations WHERE Occupation = 'Singer' order by Name
insert into @Actor(Name) SELECT Name from Occupations WHERE Occupation = 'Actor' order by Name

SELECT
 D.Name,
 P.Name,
 S.Name,
 A.Name
FROM
    @Doctor AS D
FULL OUTER JOIN 
    @Professor AS P
        ON D.id = P.id
Full outer join
    @Singer AS S
        ON S.id = P.id
FULL OUTER JOIN 
    @Actor AS A
        ON S.id = A.id
;