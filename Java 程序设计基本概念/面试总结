面试总结： 

1.Abstract Class 和 Interface 的区别

abstract class 是可以实例化的
Interface 不可以 interface 只是一个接口 

Abstract 是继承关系， extend 每次只能从一个父类继承
Interface 可以同时implement 多个interface 

例子：
abstract class Door{
    abstract void open();
    abstract void closed();
}

interface alarm {
    void alarm();
}

class AlarmDoor extends Door implements alarm{
    void open(){...};
    void close(){...};
    void alarm(){...};
}


Abstract class  可以用来定义抽象类 对于门来说 一般都有开和关的功能 
但是alarm 分很多种 声控 指纹 等等 而且不是门的必须功能

所以这里的最佳方案是采用Abstract 来实例化必要的 method  
用implement 来实现custimizd 的function


2.GET 与 PUT 的区别 

GET  retrive data from database 

PUT  相当于UPDATE database

POST 相当于Insert 或者 CREAT 

Delete 就是DELETE

HashMap 与 HashTable的区别 

HashMap 不是线程安全的
HashMap 是一个接口 是 map 接口的子接口，是将键映射到值的对象，其中键和值都是对象，并且不能包含重复键，但可以包含重复值。HashMap 允许 null key 和 null value，而 HashTable 不允许。

HashTable 是线程安全 Collection。
HashMap 是 HashTable 的轻量级实现，他们都完成了Map 接口，主要区别在于 HashMap 允许 null key 和 null value,由于非线程安全，效率上可能高于 Hashtable。

区别如下：
HashMap允许将 null 作为一个 entry 的 key 或者 value，而 Hashtable 不允许。
HashMap 把 Hashtable 的 contains 方法去掉了，改成 containsValue 和 containsKey。因为 contains 方法容易让人引起误解。
HashTable 继承自 Dictionary 类，而 HashMap 是 Java1.2 引进的 Map interface 的一个实现。
HashTable 的方法是 Synchronize 的，而 HashMap 不是，在多个线程访问 Hashtable 时，不需要自己为它的方法实现同步，而 HashMap 就必须为之提供外同步。
Hashtable 和 HashMap 采用的 hash/rehash 算法都大概一样，所以性能不会有很大的差异。

作者：rawer
链接：https://www.jianshu.com/p/5c34133ed372
來源：简书
简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。
